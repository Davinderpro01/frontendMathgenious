{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PerfilService = /*#__PURE__*/(() => {\n  class PerfilService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.backendUrl;\n    }\n\n    getPerfilData(token) {\n      const headers = {\n        Authorization: token\n      };\n      return this.http.get(`${this.baseUrl}perfil`, {\n        headers\n      });\n    } //fuciones para CRUD de cursos\n\n\n    getModules() {\n      return this.http.get(`${this.baseUrl}api/modules`);\n    }\n\n    createModule(moduleData) {\n      return this.http.post(`${this.baseUrl}api/modules`, moduleData);\n    }\n\n    updateModule(moduleId, moduleData) {\n      return this.http.put(`${this.baseUrl}api/modules/${moduleId}`, moduleData);\n    }\n\n    deleteModule(moduleId) {\n      return this.http.delete(`${this.baseUrl}api/modules/${moduleId}`);\n    } //funciones para CRUD de temas\n    // Obtener la lista de submódulos de un módulo por su ID\n\n\n    getSubmodules(moduleId) {\n      return this.http.get(`${this.baseUrl}api/modules/${moduleId}/submodules`);\n    } // Crear un nuevo submódulo asociado a un módulo\n\n\n    createSubmodule(moduleId, submoduleData) {\n      // Asegúrate de incluir el ID del módulo seleccionado en los datos del submódulo\n      const dataWithModuleId = { ...submoduleData,\n        moduleId: moduleId\n      };\n      return this.http.post(`${this.baseUrl}api/modules/${moduleId}/submodules`, dataWithModuleId);\n    } // Obtener la lista de submódulos de un módulo por su ID\n\n\n    getSubmodule(moduleId) {\n      return this.http.get(`${this.baseUrl}api/modules/${moduleId}/submodules`);\n    }\n\n    updateSubmodule(submoduleId, submoduleData) {\n      return this.http.put(`${this.baseUrl}api/submodules/${submoduleId}`, submoduleData);\n    }\n\n    deleteSubmodule(submoduleId) {\n      return this.http.delete(`${this.baseUrl}api/submodules/${submoduleId}`);\n    } // funciones para CRUD de videos\n\n\n    getVideos(submoduleId) {\n      return this.http.get(`${this.baseUrl}api/submodules/${submoduleId}/videos`);\n    }\n\n    createVideo(submoduleId, videoData) {\n      return this.http.post(`${this.baseUrl}api/submodules/${submoduleId}/videos`, videoData);\n    }\n\n    getVideo(videoId) {\n      return this.http.get(`${this.baseUrl}api/videos/${videoId}`);\n    }\n\n    updateVideo(videoId, videoData) {\n      return this.http.put(`${this.baseUrl}api/videos/${videoId}`, videoData);\n    }\n\n    deleteVideo(videoId) {\n      return this.http.delete(`${this.baseUrl}api/videos/${videoId}`);\n    }\n\n  }\n\n  PerfilService.ɵfac = function PerfilService_Factory(t) {\n    return new (t || PerfilService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  PerfilService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PerfilService,\n    factory: PerfilService.ɵfac,\n    providedIn: 'root'\n  });\n  return PerfilService;\n})();","map":null,"metadata":{},"sourceType":"module"}