{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SubmoduleService = /*#__PURE__*/(() => {\n  class SubmoduleService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.backendUrl;\n    } // Obtener detalles de un submódulo por su enlace\n\n\n    getSubmoduleByEnlace(enlace) {\n      return this.http.get(`${this.baseUrl}api/submodules/${enlace}`);\n    } // Crear un nuevo submódulo asociado a un módulo\n\n\n    createSubmodule(moduleId, submoduleData) {\n      return this.http.post(`${this.baseUrl}api/modules/${moduleId}/submodules`, submoduleData);\n    } // Actualizar los detalles de un submódulo\n\n\n    updateSubmodule(submoduleId, submoduleData) {\n      return this.http.put(`${this.baseUrl}api/submodules/${submoduleId}`, submoduleData);\n    } // Eliminar un submódulo por su ID\n\n\n    deleteSubmodule(submoduleId) {\n      return this.http.delete(`${this.baseUrl}api/submodules/${submoduleId}`);\n    } // Agrega este método para obtener submódulos\n\n\n    getSubmodules(moduleId) {\n      return this.http.get(`${this.baseUrl}api/modules/${moduleId}/submodules`);\n    }\n\n  }\n\n  SubmoduleService.ɵfac = function SubmoduleService_Factory(t) {\n    return new (t || SubmoduleService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  SubmoduleService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SubmoduleService,\n    factory: SubmoduleService.ɵfac,\n    providedIn: 'root'\n  });\n  return SubmoduleService;\n})();","map":null,"metadata":{},"sourceType":"module"}