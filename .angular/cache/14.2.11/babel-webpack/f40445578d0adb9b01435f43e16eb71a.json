{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/perfil.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/platform-browser\";\nimport * as i4 from \"@angular/common\";\n\nfunction VideoComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"div\", 5)(2, \"h2\", 6);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\", 7);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 8);\n    i0.ɵɵelement(7, \"span\", 9)(8, \"iframe\", 10);\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const video_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(video_r1.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(video_r1.description);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"src\", ctx_r0.getSafeUrl(video_r1.url), i0.ɵɵsanitizeResourceUrl);\n  }\n}\n\nexport let VideoComponent = /*#__PURE__*/(() => {\n  class VideoComponent {\n    constructor(perfilService, route, sanitizer // Inyecta DomSanitizer aquí\n    ) {\n      this.perfilService = perfilService;\n      this.route = route;\n      this.sanitizer = sanitizer;\n      this.submoduleId = '';\n      this.videos = [];\n      this.selectedVideoId = null;\n    }\n\n    ngOnInit() {\n      this.submoduleId = this.route.snapshot.paramMap.get('submoduleId') ?? ''; // Obtener la lista de videos para el tema\n\n      this.perfilService.getVideos(this.submoduleId).subscribe({\n        next: videos => {\n          this.videos = videos;\n        },\n        error: error => {\n          console.log('Error al obtener la lista de videos:', error);\n        }\n      });\n    }\n\n    showVideo(videoId) {\n      this.selectedVideoId = videoId;\n    } // Método para sanitizar la URL\n\n\n    getSafeUrl(url) {\n      return this.sanitizer.bypassSecurityTrustResourceUrl(url);\n    }\n\n    createVideo(videoData) {\n      this.perfilService.createVideo(this.submoduleId, videoData).subscribe({\n        next: createdVideo => {\n          this.videos.push(createdVideo);\n        },\n        error: error => {\n          console.log('Error al crear el video:', error);\n        }\n      });\n    }\n\n    updateVideo(videoId, videoData) {\n      this.perfilService.updateVideo(videoId, videoData).subscribe({\n        next: updatedVideo => {\n          const index = this.videos.findIndex(video => video._id === videoId);\n\n          if (index !== -1) {\n            this.videos[index] = updatedVideo;\n          }\n        },\n        error: error => {\n          console.log('Error al actualizar el video:', error);\n        }\n      });\n    }\n\n    deleteVideo(videoId) {\n      this.perfilService.deleteVideo(videoId).subscribe({\n        next: () => {\n          this.videos = this.videos.filter(video => video._id !== videoId);\n        },\n        error: error => {\n          console.log('Error al eliminar el video:', error);\n        }\n      });\n    }\n\n  }\n\n  VideoComponent.ɵfac = function VideoComponent_Factory(t) {\n    return new (t || VideoComponent)(i0.ɵɵdirectiveInject(i1.PerfilService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.DomSanitizer));\n  };\n\n  VideoComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: VideoComponent,\n    selectors: [[\"app-video\"]],\n    decls: 4,\n    vars: 1,\n    consts: [[1, \"container\"], [1, \"video-platform\"], [1, \"video-list\"], [\"class\", \"video-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"video-item\"], [1, \"video-card\"], [1, \"video-title\"], [1, \"video-description\"], [1, \"video-wrapper\"], [1, \"spinner-border\"], [\"title\", \"Videos\", \"allow\", \"autoplay; encrypted-media\", \"allowfullscreen\", \"\", 3, \"src\"]],\n    template: function VideoComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵtemplate(3, VideoComponent_div_3_Template, 9, 3, \"div\", 3);\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.videos);\n      }\n    },\n    dependencies: [i4.NgForOf],\n    styles: [\".container[_ngcontent-%COMP%]{justify-content:center;align-items:center;height:100vh}.video-platform[_ngcontent-%COMP%]{display:flex;flex-wrap:wrap;justify-content:center}.video-list[_ngcontent-%COMP%]{display:flex;flex-wrap:wrap;width:100%}.video-item[_ngcontent-%COMP%]{flex-basis:calc(33.33% - 40px);margin:20px;border-radius:15px;box-shadow:0 2px 4px #000;background-color:#fff;overflow:hidden}.video-wrapper[_ngcontent-%COMP%]{position:relative;width:100%;height:0;padding-bottom:56.25%}.spinner-border[_ngcontent-%COMP%]{position:absolute;top:30%;left:45%;color:red}iframe[_ngcontent-%COMP%]{border-radius:10px;position:absolute;top:0;left:0;width:100%;height:100%}.video-card[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:space-between;height:100%}.video-title[_ngcontent-%COMP%]{margin:0;padding:10px;font-size:20px;background-color:#d6960d;text-align:center;border-radius:10px 10px 0 0;color:#fff;box-shadow:0 2px 2px #00000080}.video-description[_ngcontent-%COMP%]{margin:10px;padding-bottom:10px}@media (max-width: 768px){.video-item[_ngcontent-%COMP%]{flex-basis:calc(50% - 40px)}}@media (max-width: 576px){.video-item[_ngcontent-%COMP%]{flex-basis:100%}}\"]\n  });\n  return VideoComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}