{"ast":null,"code":"import { Router } from '@angular/router';\nimport { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport let AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.baseUrl = environment.backendUrl;\n    }\n\n    canActivate() {\n      const token = localStorage.getItem('token');\n\n      if (token) {\n        return this.verifyToken(token);\n      } else {\n        this.router.navigate(['/']);\n        return of(false);\n      }\n    }\n\n    verifyToken(token) {\n      const headers = new HttpHeaders().set('Authorization', token);\n      return this.http.get(`${this.baseUrl}perfil`, {\n        headers\n      }).pipe(map(response => {\n        return true;\n      }), catchError(error => {\n        if (error.status === 401 && error.error.message === 'Acceso no autorizado') {\n          this.router.navigate(['/']);\n        }\n\n        return of(false);\n      }));\n    }\n\n  }\n\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}